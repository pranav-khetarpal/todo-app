// import 'dart:convert';
// import 'package:flutter/material.dart';
// import 'package:http/http.dart' as http;
// import 'package:to_do_app/todo_model.dart';
// import 'package:to_do_app/todo_tile.dart';

// class ToDoPage extends StatefulWidget {
//   const ToDoPage({super.key});

//   @override
//   State<ToDoPage> createState() => _ToDoPageState();
// }

// class _ToDoPageState extends State<ToDoPage> {
//   // The IP address of the backend server
//   final String ipAddress = 'http://10.0.0.32:8000'; // Change to your backend IP

//   // List to store todos
//   List<TodoModel> todos = [];

//   @override
//   void initState() {
//     super.initState();
//     fetchInitialTodos();
//   }

//   // Method to fetch the initial todo's for the user
//   void fetchInitialTodos() async {
//     String url = '$ipAddress/read';

//     final response = await http.get(Uri.parse(url));

//     if (response.statusCode == 200) {
//       List<dynamic> todoJson = jsonDecode(response.body);
//       setState(() {
//         todos = todoJson.map((json) => TodoModel.fromJson(json)).toList();
//       });
//     } else {
//       // Handle error
//       print("Failed to load todos");
//     }
//   }

//   // Method to create a new todo
//   void createNewTodo() {
//     TextEditingController toDoTitleController = TextEditingController();
//     TextEditingController toDoDescriptionController = TextEditingController();

//     showDialog(
//       context: context,
//       builder: (BuildContext context) {
//         return AlertDialog(
//           title: const Text("Create a new todo"),
//           content: SingleChildScrollView(
//             child: Column(
//               mainAxisSize: MainAxisSize.min,
//               children: [
//                 TextField(
//                   controller: toDoTitleController,
//                   decoration: const InputDecoration(
//                     border: OutlineInputBorder(),
//                     hintText: "Title",
//                   ),
//                 ),
//                 const SizedBox(height: 10),
//                 TextField(
//                   controller: toDoDescriptionController,
//                   decoration: const InputDecoration(
//                     border: OutlineInputBorder(),
//                     hintText: "Description",
//                   ),
//                 ),
//               ],
//             ),
//           ),
//           actions: [
//             TextButton(
//               onPressed: () {
//                 Navigator.of(context).pop();
//               },
//               child: const Text(
//                 "Cancel",
//                 style: TextStyle(
//                   color: Colors.red,
//                 ),
//               ),
//             ),
//             TextButton(
//               onPressed: () async {
//                 String todoTitle = toDoTitleController.text;
//                 String todoDescription = toDoDescriptionController.text;
//                 TodoModel newTodo = TodoModel(
//                   id: '', // Typically, the ID will be generated by the backend
//                   title: todoTitle,
//                   description: todoDescription,
//                   completed: false,
//                 );

//                 String url = '$ipAddress/create';

//                 // Sending the appropriate POST request
//                 final response = await http.post(
//                   Uri.parse(url),
//                   headers: {'Content-Type': 'application/json'},
//                   body: jsonEncode(newTodo.toJson()),
//                 );

//                 if (response.statusCode == 200) {
//                   // Handle successful creation of the todo
//                   setState(() {
//                     todos.add(TodoModel.fromJson(jsonDecode(response.body)));
//                   });
//                   print("Todo Created: ${response.body}");
//                 } else {
//                   // Handle error
//                   print("Failed to create todo: ${response.body}");
//                 }

//                 // Clear the text controllers and get rid of the pop up
//                 Navigator.of(context).pop();
//               },
//               child: const Text(
//                 'Create',
//                 style: TextStyle(
//                   color: Colors.blue,
//                 ),
//               ),
//             ),
//           ],
//         );
//       },
//     );
//   }

//   // Method to update a todo
//   Future<void> updateTodo(TodoModel todo) async {
//     TextEditingController toDoTitleController = TextEditingController(text: todo.title);
//     TextEditingController toDoDescriptionController = TextEditingController(text: todo.description ?? "");

//     showDialog(
//       context: context,
//       builder: (BuildContext context) {
//         return AlertDialog(
//           title: const Text("Update this todo"),
//           content: SingleChildScrollView(
//             child: Column(
//               mainAxisSize: MainAxisSize.min,
//               children: [
//                 // TextField for the title
//                 TextField(
//                   controller: toDoTitleController,
//                   decoration: const InputDecoration(
//                     border: OutlineInputBorder(),
//                     hintText: "Title",
//                   ),
//                 ),
//                 const SizedBox(height: 10),
//                 // TextField for the description
//                 TextField(
//                   controller: toDoDescriptionController,
//                   decoration: const InputDecoration(
//                     border: OutlineInputBorder(),
//                     hintText: "Description",
//                   ),
//                 ),
//               ],
//             ),
//           ),
//           actions: [
//             TextButton(
//               onPressed: () {
//                 Navigator.of(context).pop();
//               },
//               child: const Text(
//                 "Cancel",
//                 style: TextStyle(
//                   color: Colors.red,
//                 ),
//               ),
//             ),
//             TextButton(
//               onPressed: () async {
//                 // Get the new title and description that the user entered
//                 String todoTitle = toDoTitleController.text;
//                 String todoDescription = toDoDescriptionController.text;

//                 // Update the local todo object
//                 setState(() {
//                   todo.title = todoTitle;
//                   todo.description = todoDescription;
//                 });

//                 // Construct the url with the id parameters
//                 String baseUrl = '$ipAddress/update/';
//                 String id = todo.id;
//                 String url = '$baseUrl$id';

//                 // Send the PUT request to update the todo in question
//                 final response = await http.put(
//                   Uri.parse(url),
//                   headers: {'Content-Type': 'application/json'},
//                   body: jsonEncode(todo.toJson()),
//                 );

//                 if (response.statusCode != 200) {
//                   throw Exception('Failed to update todo');
//                 }

//                 Navigator.of(context).pop();
//               },
//               child: const Text(
//                 'Update',
//                 style: TextStyle(
//                   color: Colors.blue,
//                 ),
//               ),
//             ),
//           ],
//         );
//       },
//     );
//   }

//   // Method to delete a todo
//   Future<void> deleteTodo(TodoModel todo) async {
//     // Construction the url with the id parameter
//     String baseUrl = '$ipAddress/delete/';
//     String id = todo.id;
//     String url = baseUrl + id;

//     final response = await http.delete(Uri.parse(url));
    
//     if (response.statusCode != 200) {
//       throw Exception('Failed to delete todo');
//     } else {
//       setState(() {
//         todos.remove(todo);
//       });
//     }
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(
//         title: const Text("ToDo App"),
//       ),
//       body: Center(
//         child: Padding(
//           padding: const EdgeInsets.all(25.0),
//           child: Column(
//             mainAxisAlignment: MainAxisAlignment.center,
//             children: [
//               Row(
//                 mainAxisAlignment: MainAxisAlignment.end,
//                 children: [
//                   // Add new post button with circular background
//                   Container(
//                     decoration: const BoxDecoration(
//                       shape: BoxShape.circle,
//                       color: Colors.blue, // Background color of the circular button
//                     ),
//                     child: IconButton(
//                       splashColor: Colors.black,
//                       color: Colors.white, // Icon color
//                       onPressed: createNewTodo,
//                       icon: const Icon(Icons.add),
//                     ),
//                   ),
//                 ],
//               ),
//               Expanded(
//                 child: ListView.builder(
//                   itemCount: todos.length,
//                   itemBuilder: (context, index) {
//                     TodoModel todo = todos[index];
//                     return TodoTile(
//                       todo: todo,
//                       updateTodo: updateTodo,
//                       deleteTodo: deleteTodo,
//                       onChanged: (bool? value) {
//                         setState(() {
//                           todo.completed = value ?? false;
//                         });
//                       },
//                     );
//                   },
//                 ),
//               ),
//             ],
//           ),
//         ),
//       ),
//     );
//   }
// }

import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:to_do_app/todo_model.dart';
import 'package:to_do_app/todo_tile.dart';

class ToDoPage extends StatefulWidget {
  const ToDoPage({super.key});

  @override
  State<ToDoPage> createState() => _ToDoPageState();
}

class _ToDoPageState extends State<ToDoPage> {
  // The IP address of the backend server
  final String ipAddress = 'http://10.0.0.32:8000'; // Correct IP format

  // List to store todos
  List<TodoModel> todos = [];

  @override
  void initState() {
    super.initState();
    fetchInitialTodos();
  }

  // Method to fetch the initial todo's for the user
void fetchInitialTodos() async {
  String url = '$ipAddress/read';

  try {
    final response = await http.get(Uri.parse(url));

    if (response.statusCode == 200) {
      print(response.body); // Print the raw JSON response
      List<dynamic> todoJson = jsonDecode(response.body);
      setState(() {
        todos = todoJson.map((json) => TodoModel.fromJson(json)).toList();
      });
    } else {
      print("Failed to load todos: ${response.statusCode}");
    }
  } catch (e) {
    print("Error fetching todos: $e");
  }
}

  
  // Method to create a new todo
  void createNewTodo() {
    TextEditingController toDoTitleController = TextEditingController();
    TextEditingController toDoDescriptionController = TextEditingController();

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text("Create a new todo"),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextField(
                  controller: toDoTitleController,
                  decoration: const InputDecoration(
                    border: OutlineInputBorder(),
                    hintText: "Title",
                  ),
                ),
                const SizedBox(height: 10),
                TextField(
                  controller: toDoDescriptionController,
                  decoration: const InputDecoration(
                    border: OutlineInputBorder(),
                    hintText: "Description",
                  ),
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: const Text(
                "Cancel",
                style: TextStyle(
                  color: Colors.red,
                ),
              ),
            ),
            TextButton(
              onPressed: () async {
                String todoTitle = toDoTitleController.text;
                String todoDescription = toDoDescriptionController.text;
                TodoModel newTodo = TodoModel(
                  id: -1, // Typically, the ID will be generated by the backend
                  title: todoTitle,
                  description: todoDescription,
                  completed: false,
                );

                String url = '$ipAddress/create';

                try {
                  final response = await http.post(
                    Uri.parse(url),
                    headers: {'Content-Type': 'application/json'},
                    body: jsonEncode(newTodo.toJson()),
                  );

                  if (response.statusCode == 200) {
                    setState(() {
                      todos.add(TodoModel.fromJson(jsonDecode(response.body)));
                    });
                    print("Todo Created: ${response.body}");
                  } else {
                    print("Failed to create todo: ${response.body}");
                  }
                } catch (e) {
                  print("Error creating todo: $e");
                }

                Navigator.of(context).pop();
              },
              child: const Text(
                'Create',
                style: TextStyle(
                  color: Colors.blue,
                ),
              ),
            ),
          ],
        );
      },
    );
  }

  // Method to update a todo
  Future<void> updateTodo(TodoModel todo) async {
    TextEditingController toDoTitleController = TextEditingController(text: todo.title);
    TextEditingController toDoDescriptionController = TextEditingController(text: todo.description ?? "");

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text("Update this todo"),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextField(
                  controller: toDoTitleController,
                  decoration: const InputDecoration(
                    border: OutlineInputBorder(),
                    hintText: "Title",
                  ),
                ),
                const SizedBox(height: 10),
                TextField(
                  controller: toDoDescriptionController,
                  decoration: const InputDecoration(
                    border: OutlineInputBorder(),
                    hintText: "Description",
                  ),
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: const Text(
                "Cancel",
                style: TextStyle(
                  color: Colors.red,
                ),
              ),
            ),
            TextButton(
              onPressed: () async {
                String todoTitle = toDoTitleController.text;
                String todoDescription = toDoDescriptionController.text;

                setState(() {
                  todo.title = todoTitle;
                  todo.description = todoDescription;
                });

                String url = '$ipAddress/update/${todo.id}';

                try {
                  final response = await http.put(
                    Uri.parse(url),
                    headers: {'Content-Type': 'application/json'},
                    body: jsonEncode(todo.toJson()),
                  );

                  if (response.statusCode != 200) {
                    throw Exception('Failed to update todo');
                  }
                } catch (e) {
                  print("Error updating todo: $e");
                }

                Navigator.of(context).pop();
              },
              child: const Text(
                'Update',
                style: TextStyle(
                  color: Colors.blue,
                ),
              ),
            ),
          ],
        );
      },
    );
  }

  // Method to delete a todo
  Future<void> deleteTodo(TodoModel todo) async {
    String url = '$ipAddress/delete/${todo.id}';

    try {
      final response = await http.delete(Uri.parse(url));
      if (response.statusCode != 200) {
        throw Exception('Failed to delete todo');
      } else {
        setState(() {
          todos.remove(todo);
        });
      }
    } catch (e) {
      print("Error deleting todo: $e");
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("ToDo App"),
      ),
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(25.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  Container(
                    decoration: const BoxDecoration(
                      shape: BoxShape.circle,
                      color: Colors.blue,
                    ),
                    child: IconButton(
                      splashColor: Colors.black,
                      color: Colors.white,
                      onPressed: createNewTodo,
                      icon: const Icon(Icons.add),
                    ),
                  ),
                ],
              ),
              Expanded(
                child: ListView.builder(
                  itemCount: todos.length,
                  itemBuilder: (context, index) {
                    TodoModel todo = todos[index];
                    return TodoTile(
                      todo: todo,
                      updateTodo: updateTodo,
                      deleteTodo: deleteTodo,
                      onChanged: (bool? value) {
                        setState(() {
                          todo.completed = value ?? false;
                        });
                      },
                    );
                  },
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
